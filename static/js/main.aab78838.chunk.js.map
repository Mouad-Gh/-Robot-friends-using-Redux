{"version":3,"sources":["components/ErrorBoundry.js","components/card.js","components/CardList.js","components/Scroll.js","components/searchbox.js","containers/app.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Errorboundry","props","state","hasError","err","info","this","setState","children","React","Component","Card","nom","src","comm","className","alt","List","robots","map","robot","key","id","name","email","Scroll","style","overflowY","height","Searchbox","searchchange","type","onChange","placeholder","App","OngetRobots","searchField","OnSearchChange","filterRobots","filter","toLowerCase","includes","length","connect","searchRobots","getRobots","isPending","dispatch","event","payload","target","value","fetch","then","result","json","data","catch","Boolean","window","location","hostname","match","statesearch","initialrobostate","inPending","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.aab78838.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Errorboundry extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError : false\r\n        }\r\n    }\r\n    componentDidCatch(err,info){\r\n        this.setState({hasError : true});\r\n    }\r\n    render(){\r\n        return this.state.hasError ?\r\n           <h1>Oooops you have an error</h1> :\r\n               this.props.children\r\n           \r\n    }\r\n}\r\nexport default Errorboundry;","import React from 'react';\r\n\r\nfunction Card({nom,src, comm}){\r\n    return(<div className='tc bg-light-green dib br3 pa2 ma2 grow bw2 chadow-5'>\r\n        <img src={`https://robohash.org/${src}?200x200`} alt=\"\"></img>\r\n        <h2>{nom}</h2>\r\n        <p>{comm}</p>\r\n\r\n\r\n       </div>);\r\n}\r\nexport default Card;","import React from 'react';\r\n\r\nimport Card from './card';\r\n\r\n const List=({robots})=>{\r\n    \r\n    return (<div>\r\n        {\r\n           robots.map((robot)=>{\r\n           return (<Card key={robot.id} \r\n            src={robot.id} \r\n            nom={robot.name} \r\n            comm={robot.email} />);})\r\n        }\r\n     </div>);\r\n}\r\n\r\n\r\n\r\nexport default List;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n    return(\r\n        <div style={{overflowY : 'scroll',height : '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n\r\n\r\nconst Searchbox=({searchchange})=>{\r\n    return(<div>\r\n        <input className='pa3 ba b--green bg-lightest-blue' type='search' onChange={searchchange} placeholder='Search robots'/>\r\n    </div>)\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Errorboundry from '../components/ErrorBoundry';\r\nimport List from '../components/CardList';\r\nimport './app.css';\r\nimport Scroll from '../components/Scroll';\r\nimport Searchbox from '../components/searchbox';\r\nimport {setsearchfield,requestRobots} from '../actions';\r\n\r\n//is telling me what piece of state i need to listen to and send down as props\r\nconst mapStateToProps=state=>{\r\n  return{\r\n    searchField : state.searchRobots.searchField,\r\n    robots :state.getRobots.robots,\r\n    isPending: state.getRobots.isPending,\r\n    err: state.getRobots.err\r\n  }\r\n}\r\n// tell me what props i should listen to that are actions, that need to get dispatched\r\nconst mapDispatchToProps=(dispatch)=>{\r\n  return {OnSearchChange :(event)=>dispatch(setsearchfield(event.target.value)),\r\n    OngetRobots:()=>dispatch(requestRobots())\r\n    \r\n  }\r\n}\r\nclass App extends React.Component{\r\n    componentDidMount(){\r\n\r\n      this.props.OngetRobots();\r\n    }\r\n\r\n     \r\n     render(){\r\n       \r\n       const {searchField,OnSearchChange,robots} =this.props;\r\n        const filterRobots = robots.filter(robot=> {\r\n                 return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n                });\r\n\r\n        return !robots.length ?\r\n            <h1>Loading...</h1> :\r\n          \r\n         (<div className='tc'>\r\n            <h1 className='tc f1'>Robot friends</h1>\r\n            <Searchbox searchchange={OnSearchChange}/>\r\n           <hr/>\r\n           <Scroll>\r\n             <Errorboundry>\r\n               <List robots={filterRobots} />\r\n             </Errorboundry>\r\n           </Scroll>\r\n         </div>);\r\n    }\r\n}\r\n\r\n//connect(mapStateToProps,mapDispatchToProps) : i'm listen to this part of the state and i'm interested in these actions. and it's going to give those props to the app\r\nexport default  connect(mapStateToProps,mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS\r\n    ,REQUEST_ROBOTS_FAILED} from './constants';\r\n\r\nexport const setsearchfield = (text)=>({\r\n    type : CHANGE_SEARCH_FIELD ,\r\n    payload : text\r\n})\r\n\r\nexport const requestRobots=()=>(dispatch)=>{\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(result=>result.json())\r\n    .then(data=>dispatch({type:REQUEST_ROBOTS_SUCCESS,payload: data}))\r\n    .catch(err=>dispatch({type: REQUEST_ROBOTS_FAILED,payload: err}));\r\n}","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nimport {CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS\r\n    ,REQUEST_ROBOTS_FAILED} from './constants';\r\n\r\nconst statesearch={\r\n    searchField:''\r\n}\r\nexport const searchRobots=(state=statesearch,action={})=>{\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD :\r\n            return Object.assign({},state,{searchField : action.payload});\r\n        default :\r\n        return state;\r\n    }\r\n}\r\nconst initialrobostate={\r\n    inPending: false,\r\n    robots: [],\r\n    err: ''\r\n}\r\nexport const getRobots=(state=initialrobostate,action={})=>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({},state,{isPending: true});\r\n        case REQUEST_ROBOTS_SUCCESS :\r\n            return Object.assign({},state,{isPending: false, robots: action.payload});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({},state,{isPending: false, err: action.payload})\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport { createStore,applyMiddleware, combineReducers } from 'redux';\nimport  {createLogger}  from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/app';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots,getRobots} from './reducers';\nimport 'tachyons';\n\nconst logger= createLogger();\nconst rootReducer= combineReducers({searchRobots, getRobots});\nconst store=createStore(rootReducer, applyMiddleware(thunkMiddleware,logger));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}